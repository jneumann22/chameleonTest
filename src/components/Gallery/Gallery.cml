<template lang="vue">
    <view>
      <image
        @load="{{this.handleLoad}}"
        v-if="!imageSrc || images.length === 0"
        :class="imageClass"
        :resize="resize"
        :src="noImage"
      />
      <image
      v-if="imageSrc.length === 1"
      :class="imageClass"
      :resize="resize"
      :src="imageSrc[0]"
      @load="handleLoad"
      />
      <slider v-if="imageSrc.length > 1" :class="sliderClass" interval="3000" auto-play="true">
        <view class="image-frame" v-for="img in imageSrc" :key="img">
          <image @load="handleLoad" :class="imageClass" :resize="resize" :src="img"></image>
        </view>
        <indicator class="slider-indicator" />
      </slider>
    </view>
</template>

<script>

import cml from 'cml-tt-api'

class Gallery {
  computed = {
      imageClass() {
        return `image rounded-border`
      },

      sliderClass() {
        return `slider rounded-border`
      },

      noImage() {
       if (this.domain === 'shoe' || this.domain === 'recipe') {
        return `https://m.meetkai.com/static/develop/kai_birds/gallery-${this.domain}.png`
      } else if (this.domain) {
        return `https://m.meetkai.com/static/develop/domains/${this.domain}.png`
      } else {
        return 'https://m.meetkai.com/static/develop/images/galleryPlaceholderTemp.png'
      }
    }


  }


  props: {
    images: {type: Array, default: []},
    resize: {type: String, default: 'cover'},
    border: {type: Boolean, default: true},
    domain: {type: String, default: "gaming"}
  }

  methods: {
    handleLoad (event) {
      if (event.success) {
        return null
      } else {
        if (this.domain === 'shoe' || this.domain === 'recipe') {
          this.imageSrc = [`https://m.meetkai.com/static/develop/kai_birds/kai-${this.domain}.png`]
          return this.imageSrc
        } else if (this.domain) {
          this.imageSrc = [`https://m.meetkai.com/static/develop/domains/${this.domain}.png`]
        } else {
          this.imageSrc = ['https://m.meetkai.com/static/develop/images/galleryPlaceholderTemp.png']
          return this.imageSrc
        }
      }
    }
  
  }

data {
  imageSrc = this.images
}



}
  
  
  
 export default new Gallery();

</script>

<style scoped>
  .rounded-border {
    border-top-left-radius: 37cpx;
    border-top-right-radius: 37cpx;
  }
  .slider {
    height: 462cpx;
    width: 710cpx;
  }
  .slider-indicator {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 60cpx;
    opacity: 0.8;
    item-color: #fff;
    item-selected-color: #00A2B0;
  }
  .image-frame {
    position: relative;
    height: 462cpx;
    width: 710cpx;
  }
  .image {
    height: 462cpx;
    width: 710cpx;
  }
</style>
<script cml-type="json">
{
}
</script>